/** 
 *  DONATIONS HUFF EXERCISE
 *  
 *  The task is to Implement solidity's "receive" functionality which allows sending ether to a smart contract without any calldata
 *  also have a getter function that returns how much an address has donated. Addresses can donate several times
 */

#define function donated(address) payable returns(uint256)


#define constant donate_slot = FREE_STORAGE_POINTER()

#define macro donated() = takes(1) returns(1) {
    0x00 mstore 
    0x01 0x20 mstore 
    0x40 0x00 sha3 
    sload 
}

//forge test -vvv --mc  DonationsTest
#define macro MAIN() = takes(0) returns(0) {
    calldatasize 
    iszero deposit_fn jumpi   

    0x00 calldataload
    0xe0 shr 
    dup1 __FUNC_SIG(donated)
    eq donated_fn jumpi 

    rev jump 

    deposit_fn:
        callvalue 
        caller donated() 
        add 
        caller 0x00 mstore  
        0x01 0x20 mstore  
        0x40 0x00 sha3 
        sstore 
        0x00 0x00 return 

    donated_fn: 
        0x04 calldataload
        donated()
        0x00 
        mstore 
        0x20 0x00 return 

    rev:
        0x00 0x00 revert 
}