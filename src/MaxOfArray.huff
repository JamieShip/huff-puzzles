
/** 
 *  MAX_OF_ARRAY HUFF EXERCISE
 *  
 *  In this task, Given an abi encoded array of uint256, return its maximum value. Revert if the array is empty.
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function maxOfArray(uint256[]) payable returns(uint256)


// forge test -vvv --mc MaxOfArrayTest
#define macro MAIN() = takes(0) returns(0) {
    0x00 calldataload
    0xe0 shr 
    __FUNC_SIG(maxOfArray)
    eq max_fn jumpi
    rev jump 

    max_fn:
        0x00
        0x04 calldataload // [0x00, position]
        0x04 // [0x00, position, 0x04]
        add // [0x00, position+0x04]
        dup1 
        0x20 
        add // [0x00, position+0x04, position+0x24]
        0x20 
        mstore // // [0x00, position+0x04], mem: ["", "starting data position"] 
        calldataload // [0x00, array length]
        dup1 // [ 0x00, len, len]
        // not empty
        0x00 eq rev jumpi // [0x00, len]
        
        dup1 
        0x00 // [0x00, len, len, 0x00]
        mstore // [0x00, len], mem: [len, "starting data position"]
        calldatasize // [0x00, len, calldatasize] mem: [len, "starting data position"]
        swap1 // [0x00, calldatasize, len] mem: [len, "starting data position"]
        0x20 mul // [0x00, calldatasize, len*0x20] mem: [len, "starting data position"]
        0x44 add // [0x00, calldatasize, len*0x20 + 0x44] mem: [len, "starting data position"]
        eq compare_fn jumpi 
        rev jump

    compare_fn:
        // initial stack: [index]
        dup1 // [index, index]
        0x20 
        mul // [index, index*0x20]
        0x20 
        mload //[index, index*0x20, "starting data position"]
        add // [index, i th data position]
        calldataload // [index, "i_th data"]
        0x40 
        mload  // [index, "i_th data", "temp big number"]
        dup2 // [index, "i_th data", "temp big number", "i_th data"]
        swap1  // [index, "i_th data", "i_th data", "temp big number"]
        lt swap_fn jumpi 
        pop // // [index] 
        0x01
        add             // [index+1] 
        dup1  // [index+1, index+1] 
        0x00 
        mload // [index + 1, index + 1, len]
        gt compare_fn jumpi


        0x20 0x40 return 

    swap_fn:
        // initial stack: [index, "i_th data"]
        0x40
        mstore // mem: [len, "starting data position", "temp big number"]
        0x01
        add // [index + 1]        
        compare_fn jump 

    rev:
        0x00 0x00 revert 
}