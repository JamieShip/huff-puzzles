
/** 
 *  SIMPLE_STORE HUFF EXERCISE
 *
 *  One of the storage locations available to devs when writing smart contracts is Storage. Its persistent and expensive
 *  
 *  The task is to write within the `MAIN` macro below, 2 functions...
 *      - One named `store()` that takes one function argument and stores it in storage slot 0,
 *      - the second named `read()` that simply returns what is stored at storage slot 0.
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function store(uint256) payable returns()
#define function read() payable returns(uint256)

#define macro store() = takes(1) returns(0) {
    0x01
    sstore 
}

#define macro read() = takes(0) returns(1) {
    0x01 
    sload 
}


// forge test -vvv --mc SimpleStoreTest
#define macro MAIN() = takes(0) returns(0) {
    0x00 calldataload
    0xe0 shr 
    dup1 __FUNC_SIG(store)
    eq store_fn jumpi
    __FUNC_SIG(read)
    eq read_fn jumpi
    rev jump

    store_fn:
        0x04 calldataload 
        store()
        0x00 0x00 return 

    read_fn:
        read()
        0x00 
        mstore  
        0x20 0x00 return 

    rev: 
        0x00 0x00 revert
}