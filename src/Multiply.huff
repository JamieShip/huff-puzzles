
/** 
 *  MULTIPLY HUFF EXERCISE
 *
 *  When writing solidity, we most times have to perform some mathematical operations like multiplication etc
 *  
 *  The task is to write within the `MAIN` macro below, a function named `multiply` that takes in 2 uint256s, and returns their product. Be sure to revert on overflow
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function multiply(uint256, uint256) payable returns(uint256)

// forge test -vvv --mc MultiplyTest
#define macro MAIN() = takes(0) returns(0) {
    0x00 calldataload
    0xe0 shr 
    __FUNC_SIG(multiply) eq mul_fn jumpi

    rev jump 

    mul_fn:
        0x04 calldataload //[a]
        0x24 calldataload // [a, b]
        mul // [a*b]
        0x24 calldataload // [a*b, b] 
        0x04 calldataload // [a*b, b, a]
        dup2 // [a*b, b, a, b]
        dup4 // [a*b, b, a, b, a*b]
        div // [a*b, b, a, a*b/b]
        eq // [a*b, b, a == a*b/b]
        iszero //  [a*b, b, a != a*b/b]
        swap1 //  [a*b, a != a*b/b, b]
        iszero iszero // [a*b, a != a*b/b, b!=0]
        and // [a*b, b!=0 && a != a*b/b]
        rev jumpi 

        0x00 mstore 
        0x20 0x00 return 

    rev: 
        0x00 0x00 revert 
}